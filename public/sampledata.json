[{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "source_block_name": "keyring_lookup_secret(const char *, const char *)",
  "source_start_line": 51,
  "source_end_line": 80,
  "source_code": "keyring_lookup_secret (const char *uuid, const char *secret_name)\n{\n\tGHashTable *attrs;\n\tGList *list;\n\tchar *secret = NULL;\n\n\tattrs = secret_attributes_build (&network_manager_secret_schema,\n\t     KEYRING_UUID_TAG, uuid,\n\t     KEYRING_SN_TAG, NM_SETTING_VPN_SETTING_NAME,\n\t     KEYRING_SK_TAG, secret_name,\n\t     NULL);\n\n\tlist = secret_service_search_sync (NULL, &network_manager_secret_schema, attrs,\n\t       SECRET_SEARCH_ALL | SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,\n\t       NULL, NULL);\n\tif (list && list->data) {\n\t\tSecretItem *item = list->data;\n\t\tSecretValue *value = secret_item_get_secret (item);\n\n\t\tif (value) {\n\t\t\tsecret = g_strdup (secret_value_get (value, NULL));\n\t\t\tsecret_value_unref (value);\n\t\t}\n\t}\n\n\tg_list_free_full (list, g_object_unref);\n\tg_hash_table_unref (attrs);\n\treturn secret;\n}\n",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "matched_block_name": "keyring_lookup_secret(const char *, const char *)",
  "matched_start_line": 51,
  "matched_end_line": 80,
  "matched_code": "keyring_lookup_secret (const char *uuid, const char *secret_name)\n{\n\tGHashTable *attrs;\n\tGList *list;\n\tchar *secret = NULL;\n\n\tattrs = secret_attributes_build (&network_manager_secret_schema,\n\t     KEYRING_UUID_TAG, uuid,\n\t     KEYRING_SN_TAG, NM_SETTING_VPN_SETTING_NAME,\n\t     KEYRING_SK_TAG, secret_name,\n\t     NULL);\n\n\tlist = secret_service_search_sync (NULL, &network_manager_secret_schema, attrs,\n\t       SECRET_SEARCH_ALL | SECRET_SEARCH_UNLOCK | SECRET_SEARCH_LOAD_SECRETS,\n\t       NULL, NULL);\n\tif (list && list->data) {\n\t\tSecretItem *item = list->data;\n\t\tSecretValue *value = secret_item_get_secret (item);\n\n\t\tif (value) {\n\t\t\tsecret = g_strdup (secret_value_get (value, NULL));\n\t\t\tsecret_value_unref (value);\n\t\t}\n\t}\n\n\tg_list_free_full (list, g_object_unref);\n\tg_hash_table_unref (attrs);\n\treturn secret;\n}\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "source_block_name": "keyfile_add_entry_info(int *, const int *, const int *, const int *, int, int)",
  "source_start_line": 82,
  "source_end_line": 94,
  "source_code": "",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "matched_block_name": "keyfile_add_entry_info(int *, const int *, const int *, const int *, int, int)",
  "matched_start_line": 82,
  "matched_end_line": 94,
  "matched_code": "keyfile_add_entry_info (GKeyFile    *keyfile,\n const gchar *key,\n const gchar *value,\n const gchar *label,\n gboolean     is_secret,\n gboolean     should_ask)\n{\n\tg_key_file_set_string (keyfile, key, \"Value\", value);\n\tg_key_file_set_string (keyfile, key, \"Label\", label);\n\tg_key_file_set_boolean (keyfile, key, \"IsSecret\", is_secret);\n\tg_key_file_set_boolean (keyfile, key, \"ShouldAsk\", should_ask);\n}\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "source_block_name": "keyfile_print_stdout(int *)",
  "source_start_line": 96,
  "source_end_line": 107,
  "source_code": "",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "matched_block_name": "keyfile_print_stdout(int *)",
  "matched_start_line": 96,
  "matched_end_line": 107,
  "matched_code": "keyfile_print_stdout (GKeyFile *keyfile)\n{\n\tgchar *data;\n\tgsize length;\n\n\tdata = g_key_file_to_data (keyfile, &length, NULL);\n\n\tfputs (data, stdout);\n\n\tg_free (data);\n}\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "source_block_name": "get_secrets(const char *, const char *, int, int, int, const char *, char **, int)",
  "source_start_line": 109,
  "source_end_line": 199,
  "source_code": "",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "matched_block_name": "get_secrets(const char *, const char *, int, int, int, const char *, char **, int)",
  "matched_start_line": 109,
  "matched_end_line": 199,
  "matched_code": "get_secrets (const char *vpn_uuid,\n             const char *vpn_name,\n             gboolean retry,\n             gboolean allow_interaction,\n             gboolean external_ui_mode,\n             const char *in_pw,\n             char **out_pw,\n             NMSettingSecretFlags pw_flags)\n{\n\tNMAVpnPasswordDialog *dialog;\n\tchar *prompt, *pw = NULL;\n\tconst char *new_password = NULL;\n\n\tg_return_val_if_fail (vpn_uuid != NULL, FALSE);\n\tg_return_val_if_fail (vpn_name != NULL, FALSE);\n\tg_return_val_if_fail (out_pw != NULL, FALSE);\n\tg_return_val_if_fail (*out_pw == NULL, FALSE);\n\n\t\/* Get the existing secret, if any *\/\n\tif (   !(pw_flags & NM_SETTING_SECRET_FLAG_NOT_SAVED)\n\t    && !(pw_flags & NM_SETTING_SECRET_FLAG_NOT_REQUIRED)) {\n\t\tif (in_pw)\n\t\t\tpw = g_strdup (in_pw);\n\t\telse\n\t\t\tpw = keyring_lookup_secret (vpn_uuid, NM_L2TP_KEY_PASSWORD);\n\t}\n\n\t\/* Don't ask if the passwords is unused *\/\n\tif (pw_flags & NM_SETTING_SECRET_FLAG_NOT_REQUIRED) {\n\t\tg_free (pw);\n\t\treturn TRUE;\n\t}\n\n\t\/* Otherwise, we have no saved password, or the password flags indicated\n\t * that the password should never be saved.\n\t *\/\n\tprompt = g_strdup_printf (_(\"You need to authenticate to access the Virtual Private Network '%s'.\"), vpn_name);\n\n\tif (external_ui_mode) {\n\t\tGKeyFile *keyfile;\n\n\t\tkeyfile = g_key_file_new ();\n\n\t\tg_key_file_set_integer (keyfile, UI_KEYFILE_GROUP, \"Version\", 2);\n\t\tg_key_file_set_string (keyfile, UI_KEYFILE_GROUP, \"Description\", prompt);\n\t\tg_key_file_set_string (keyfile, UI_KEYFILE_GROUP, \"Title\", _(\"Authenticate VPN\"));\n\n\t\tkeyfile_add_entry_info (keyfile, NM_L2TP_KEY_PASSWORD, pw ? pw : \"\", _(\"Password:\"), TRUE, allow_interaction);\n\n\t\tkeyfile_print_stdout (keyfile);\n\t\tg_key_file_unref (keyfile);\n\t\tgoto out;\n\t} else if (   allow_interaction == FALSE\n\t           || (!retry && pw && !(pw_flags & NM_SETTING_SECRET_FLAG_NOT_SAVED))) {\n\t\t\/* If interaction isn't allowed, just return existing secrets.\n\t\t * Also, don't ask the user if we don't need a new password (ie, !retry),\n\t\t * we have an existing PW, and the password is saved.\n\t\t *\/\n\n\t\t*out_pw = pw;\n\t\tg_free (prompt);\n\t\treturn TRUE;\n\t}\n\n\n\tdialog = (NMAVpnPasswordDialog *) nma_vpn_password_dialog_new (_(\"Authenticate VPN\"), prompt, NULL);\n\n\tnma_vpn_password_dialog_set_show_password_secondary (dialog, FALSE);\n\n\t\/* pre-fill dialog with the password *\/\n\tif (pw && !(pw_flags & NM_SETTING_SECRET_FLAG_NOT_SAVED))\n\t\tnma_vpn_password_dialog_set_password (dialog, pw);\n\n\tgtk_widget_show (GTK_WIDGET (dialog));\n\n\tif (nma_vpn_password_dialog_run_and_block (dialog)) {\n\n\t\tnew_password = nma_vpn_password_dialog_get_password (dialog);\n\t\tif (new_password)\n\t\t\t*out_pw = g_strdup (new_password);\n\t}\n\n\tgtk_widget_hide (GTK_WIDGET (dialog));\n\tgtk_widget_destroy (GTK_WIDGET (dialog));\n\n out:\n\tg_free (prompt);\n\n\treturn TRUE;\n}\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "source_block_name": "wait_for_quit()",
  "source_start_line": 201,
  "source_end_line": 224,
  "source_code": "",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "matched_block_name": "wait_for_quit()",
  "matched_start_line": 201,
  "matched_end_line": 224,
  "matched_code": "wait_for_quit (void)\n{\n\tGString *str;\n\tchar c;\n\tssize_t n;\n\ttime_t start;\n\n\tstr = g_string_sized_new (10);\n\tstart = time (NULL);\n\tdo {\n\t\terrno = 0;\n\t\tn = read (0, &c, 1);\n\t\tif (n == 0 || (n < 0 && errno == EAGAIN))\n\t\t\tg_usleep (G_USEC_PER_SEC \/ 10);\n\t\telse if (n == 1) {\n\t\t\tg_string_append_c (str, c);\n\t\t\tif (strstr (str->str, \"QUIT\") || (str->len > 10))\n\t\t\t\tbreak;\n\t\t} else\n\t\t\tbreak;\n\t} while (time (NULL) < start + 20);\n\tg_string_free (str, TRUE);\n}\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "source_block_name": "main(int, char **)",
  "source_start_line": 226,
  "source_end_line": 299,
  "source_code": "",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/auth-dialog\/main.c",
  "matched_block_name": "main(int, char **)",
  "matched_start_line": 226,
  "matched_end_line": 299,
  "matched_code": "main (int argc, char *argv[])\n{\n\tgboolean retry = FALSE, allow_interaction = FALSE, external_ui_mode = FALSE;\n\tchar *vpn_name = NULL, *vpn_uuid = NULL, *vpn_service = NULL, *password = NULL;\n\tGHashTable *data = NULL, *secrets = NULL;\n\tNMSettingSecretFlags pw_flags = NM_SETTING_SECRET_FLAG_NONE;\n\tGOptionContext *context;\n\tGOptionEntry entries[] = {\n\t\t\t{ \"reprompt\", 'r', 0, G_OPTION_ARG_NONE, &retry, \"Reprompt for passwords\", NULL},\n\t\t\t{ \"uuid\", 'u', 0, G_OPTION_ARG_STRING, &vpn_uuid, \"UUID of VPN connection\", NULL},\n\t\t\t{ \"name\", 'n', 0, G_OPTION_ARG_STRING, &vpn_name, \"Name of VPN connection\", NULL},\n\t\t\t{ \"service\", 's', 0, G_OPTION_ARG_STRING, &vpn_service, \"VPN service type\", NULL},\n\t\t\t{ \"allow-interaction\", 'i', 0, G_OPTION_ARG_NONE, &allow_interaction, \"Allow user interaction\", NULL},\n\t\t\t{ \"external-ui-mode\", 0, 0, G_OPTION_ARG_NONE, &external_ui_mode, \"External UI mode\", NULL},\n\t\t\t{ NULL }\n\t\t};\n\n\tbindtextdomain (GETTEXT_PACKAGE, NULL);\n\tbind_textdomain_codeset (GETTEXT_PACKAGE, \"UTF-8\");\n\ttextdomain (GETTEXT_PACKAGE);\n\n\tgtk_init (&argc, &argv);\n\n\tcontext = g_option_context_new (\"- l2tp auth dialog\");\n\tg_option_context_add_main_entries (context, entries, GETTEXT_PACKAGE);\n\tg_option_context_parse (context, &argc, &argv, NULL);\n\tg_option_context_free (context);\n\n\tif (!vpn_uuid || !vpn_service || !vpn_name) {\n\t\tfprintf (stderr, \"A connection UUID, name, and VPN plugin service name are required.\\n\");\n\t\treturn 1;\n\t}\n\n\tif (strcmp (vpn_service, NM_DBUS_SERVICE_L2TP) != 0) {\n\t\tfprintf (stderr, \"This dialog only works with the '%s' service\\n\", NM_DBUS_SERVICE_L2TP);\n\t\treturn 1;\n\t}\n\n\tif (!nm_vpn_service_plugin_read_vpn_details (0, &data, &secrets)) {\n\t\tfprintf (stderr, \"Failed to read '%s' (%s) data and secrets from stdin.\\n\",\n\t\t         vpn_name, vpn_uuid);\n\t\treturn 1;\n\t}\n\n\tnm_vpn_service_plugin_get_secret_flags (secrets, NM_L2TP_KEY_PASSWORD, &pw_flags);\n\n\tif (!get_secrets (vpn_uuid, vpn_name, retry, allow_interaction, external_ui_mode,\n\t                  g_hash_table_lookup (secrets, NM_L2TP_KEY_PASSWORD),\n\t                  &password,\n\t                  pw_flags))\n\t\treturn 1;\n\n\tif (!external_ui_mode) {\n\t\t\/* dump the passwords to stdout *\/\n\t\tif (password)\n\t\t\tprintf (\"%s\\n%s\\n\", NM_L2TP_KEY_PASSWORD, password);\n\t\tprintf (\"\\n\\n\");\n\n\t\tg_free (password);\n\n\t\t\/* for good measure, flush stdout since Kansas is going Bye-Bye *\/\n\t\tfflush (stdout);\n\n\t\t\/* Wait for quit signal *\/\n\t\twait_for_quit ();\n\t}\n\n\tif (data)\n\t\tg_hash_table_unref (data);\n\tif (secrets)\n\t\tg_hash_table_unref (secrets);\n\treturn 0;\n}\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/properties\/nm-l2tp-editor-plugin.c",
  "source_block_name": "nm_vpn_editor_factory_l2tp(int *, int *, int **)",
  "source_start_line": 48,
  "source_end_line": 51,
  "source_code": "\tPROP_NAME,\n\tPROP_DESC,\n\tPROP_SERVICE,\n",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/properties\/nm-l2tp-editor-plugin.c",
  "matched_block_name": "nm_vpn_editor_factory_l2tp(int *, int *, int **)",
  "matched_start_line": 48,
  "matched_end_line": 51,
  "matched_code": "\tPROP_NAME,\n\tPROP_DESC,\n\tPROP_SERVICE,\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/properties\/nm-l2tp-editor-plugin.c",
  "source_block_name": "G_DEFINE_TYPE_EXTENDED(L2tpPluginUi, int, int)",
  "source_start_line": 43,
  "source_end_line": 45,
  "source_code": "",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/properties\/nm-l2tp-editor-plugin.c",
  "matched_block_name": "G_DEFINE_TYPE_EXTENDED(L2tpPluginUi, int, int)",
  "matched_start_line": 43,
  "matched_end_line": 45,
  "matched_code": " G_IMPLEMENT_INTERFACE (NM_TYPE_VPN_EDITOR_PLUGIN,\n                   l2tp_plugin_ui_interface_init))\n"
},
{
  "id": null,
  "source_file_name": "temp\/network-manager-l2tp-1.2.10\/properties\/nm-l2tp-editor-plugin.c",
  "source_block_name": "import(int *, const char *, int **)",
  "source_start_line": 58,
  "source_end_line": 87,
  "source_code": "",
  "matched_proj_name": "network-manager-l2tp-1.2.10",
  "matched_file_name": "network-manager-l2tp-1.2.10\/properties\/nm-l2tp-editor-plugin.c",
  "matched_block_name": "import(int *, const char *, int **)",
  "matched_start_line": 58,
  "matched_end_line": 87,
  "matched_code": "import (NMVpnEditorPlugin *iface, const char *path, GError **error)\n{\n\tNMConnection *connection = NULL;\n\tchar *ext;\n\n\text = strrchr (path, '.');\n\tif (!ext) {\n\t\tg_set_error (error,\n\t\t             NMV_EDITOR_PLUGIN_ERROR,\n\t\t             NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,\n\t\t             \"unknown L2TP file extension\");\n\t\treturn NULL;\n\t}\n\n\tif (strcmp (ext, \".conf\") && strcmp (ext, \".cnf\")) {\n\t\tg_set_error (error,\n\t\t             NMV_EDITOR_PLUGIN_ERROR,\n\t\t             NMV_EDITOR_PLUGIN_ERROR_FILE_NOT_VPN,\n\t\t             \"unknown L2TP file extension\");\n\t\treturn NULL;\n\t}\n\n\tconnection = do_import (path, error);\n\n\tif ((connection == NULL) && (*error != NULL))\n\t\tg_warning(\"Can't import file as L2TP config: %s\", (*error)->message);\n\n\treturn connection;\n}\n"
}
]
